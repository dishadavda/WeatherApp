@using WeatherApp.Data.Entities
@if (IsVisible)
{
    <div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
        <div class="animate-fade-in-up bg-white dark:bg-gray-800 rounded-2xl shadow-xl w-full max-w-md mx-4 relative transition duration-300 ease-out">
            <!-- Header -->
            <div class="flex items-center justify-between px-4 py-3 border-b border-gray-200 dark:border-gray-600">
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Favorite Cities</h3>
                <button type="button"
                        @onclick="CloseModal"
                        class="text-gray-400 hover:text-gray-900 hover:bg-gray-200 dark:hover:text-white dark:hover:bg-gray-600 rounded-full w-8 h-8 flex items-center justify-center transition">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                              d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>

            <!-- Body -->
            <div class="px-4 py-3 space-y-3 max-h-80 overflow-y-auto">
                @if (Cities != null && Cities.Count > 0)
                {
                    @foreach (var city in Cities)
                    {
                        <div class="flex justify-between items-center py-2 px-4 bg-gray-100 rounded mb-2 shadow-sm">
                            <span class="text-lg text-gray-800 font-semibold">@city.CityName</span>

                            <div class="flex gap-4 items-center">
                                <button class="text-blue-600 hover:underline"
                                        @onclick="@(() => ViewCity(city.CityName))">
                                    View
                                </button>
                                <button @onclick="() => OnRemove.InvokeAsync((city.Id, city))"
                                        class="text-red-600 hover:text-red-800 font-medium">
                                    Remove
                                </button>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p class="text-gray-600 dark:text-gray-300">No favorite cities found.</p>
                }
            </div>

            <!-- Footer -->
            <div class="flex justify-end px-4 py-3 border-t border-gray-200 dark:border-gray-600">
                <button @onclick="CloseModal"
                        class="bg-blue-600 hover:bg-blue-700 text-white text-sm px-4 py-2 rounded transition duration-150">
                    Close
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<string> OnViewCity { get; set; }
    [Parameter] public List<Favoritecity> Cities { get; set; } = new();
    [Parameter] public EventCallback<(long, Favoritecity)> OnRemove { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    private async Task CloseModal()
    {
        await OnClose.InvokeAsync();
    }
    private async Task ViewCity(string cityName)
    {
        await OnViewCity.InvokeAsync(cityName);
    }
}
