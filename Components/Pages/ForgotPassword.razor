@page "/forgot-password"
@attribute [Authorize]
@layout LoginLayout
@using System.ComponentModel.DataAnnotations
@using Weartherapp.Components.Layout
@using Weartherapp.Data
@using Weartherapp.Data.Model
@using Weartherapp.Services
@inject ApplicationDbContext Context
@inject EmailSender EmailSender
@inject NavigationManager Nav

<EditForm Model="model" OnValidSubmit="HandleForgotPassword">
    <DataAnnotationsValidator />

    <div class="max-w-md mx-auto bg-white bg-opacity-90 backdrop-blur-md p-8 shadow-2xl rounded-xl mt-12">
        <h2 class="text-3xl font-bold mb-6 text-center text-blue-800">Forgot Password</h2>

        <!-- Email -->
        <div class="mb-4">
            <label class="block text-gray-700 mb-1 font-medium">Email</label>
            <InputText @bind-Value="model.Email"
                       class="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-400"
                       placeholder="Enter your email" />
            <ValidationMessage For="@(() => model.Email)" />
        </div>

        <!-- Submit Button -->
        <button type="submit"
                class="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700 transition duration-200">
            Send Reset Link
        </button>

        <!-- Success Message -->
        @if (!string.IsNullOrEmpty(message))
        {
            <div class="text-green-600 text-center mt-4 font-medium">@message</div>
        }

        <!-- Back to Login -->
        <p class="mt-6 text-center text-sm text-gray-700">
            Remembered your password?
            <a href="/login" class="text-blue-600 hover:underline">Go to login</a>
        </p>
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(message))
{
    <p class="mt-4 text-green-600">@message</p>
}

@code {
    private string message = "";
    private EmailInputModel model = new();

    public class EmailInputModel
    {
        [Required, EmailAddress]
        public string Email { get; set; } = string.Empty;
    }

    private async Task HandleForgotPassword()
    {
        var user = Context.users.FirstOrDefault(u => u.Email == model.Email);
        if (user != null)
        {
            var token = Guid.NewGuid().ToString();
            var resetEntry = new PasswordResetToken
            {
                UserId = user.UserId,
                Email = user.Email,
                Token = token,
                ExpiryDate = DateTime.UtcNow.AddMinutes(30)
            };
            Context.PasswordResetTokens.Add(resetEntry);
            try
            {
                await Context.SaveChangesAsync();
                message = "Saved successfully!";
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[Save Error] {ex.Message}");
                message = "Something went wrong while saving.";
            }

            var link = Nav.BaseUri + $"reset-password?token={token}";
            var body = $"Reset your password using this link: <a href='{link}'>Reset Password</a>";

            await EmailSender.SendEmailAsync(user.Email, "Reset Password", body);
        }

        message = "If your email is valid, a reset link has been sent.";
    }
}
