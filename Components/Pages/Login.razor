@page "/login"
@layout LoginLayout
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Identity
@using Weartherapp.Components.Layout
@using Weartherapp.Data
@using WeatherApp.Data.Models
@inject ApplicationDbContext Context;
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider provider
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthenticationStateProvider AuthProvider




@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="text-red-500">@errorMessage</div>
}

<EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="LoginForm">
    <DataAnnotationsValidator />

    <div class="max-w-md mx-auto bg-white bg-opacity-90 backdrop-blur-md p-8 shadow-2xl rounded-xl mt-12">
        <h2 class="text-3xl font-bold mb-6 text-center text-blue-800">Weather App Login</h2>

        <!-- Email -->
        <div class="mb-4">
            <label class="block text-gray-700 mb-1 font-medium">Email</label>
            <InputText @bind-Value="loginModel.Email"
                       @oninput="() => errorMessage = null"
                       type="email"
                       class="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-400" />
            <ValidationMessage For="@(() => loginModel.Email)" />
        </div>

        <!-- Password -->
        <div class="mb-6">
            <label class="block text-gray-700 mb-1 font-medium">Password</label>
            <div class="relative">
                <InputText @bind-Value="loginModel.Password"
                           type="@passwordType"
                           class="w-full p-2 pr-12 border border-gray-300 rounded focus:ring-2 focus:ring-blue-400" />
                <button type="button"
                        @onclick="TogglePasswordVisibility"
                        class="absolute inset-y-0 right-3 flex items-center text-gray-500 hover:text-gray-800 focus:outline-none">
                    @if (showPassword)
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M13.875 18.825A10.05 10.05 0 0112 19c-5.523 0-10-5.373-10-7s4.477-7 10-7c1.19 0 2.332.209 3.375.6M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                            <path stroke-linecap="round" stroke-linejoin="round" d="M3 3l18 18" />
                        </svg>
                    }
                    else
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                            <path stroke-linecap="round" stroke-linejoin="round" d="M2.458 12C3.732 7.943 7.523 5 12 5s8.268 2.943 9.542 7c-1.274 4.057-5.065 7-9.542 7S3.732 16.057 2.458 12z" />
                        </svg>
                    }
                </button>
            </div>
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>

        <!-- Remember Me -->
        <div class="mb-6 flex items-center">
            <InputCheckbox @bind-Value="loginModel.RememberMe" class="mr-2" />
            <label class="text-sm text-gray-700">Remember me</label>
        </div>

        <!-- Submit Button -->
        <button type="submit"
                class="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700 transition duration-200">
            Login
        </button>

        <!-- Error Message -->
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="text-red-600 text-center mt-4 font-medium">@errorMessage</div>
        }

        <!-- Register Redirect -->
        <p class="mt-6 text-center text-sm text-gray-700">
            Don’t have an account?
            <a href="/authentication/register" class="text-blue-600 hover:underline">Register here</a>
        </p>
        <!-- Forgot Password -->
        <!-- Forgot Password -->
        <p class="mt-2 text-center text-sm">
            <a href="/forgot-password" class="text-blue-600 hover:underline">Forgot password?</a>
        </p>
    </div>
</EditForm>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromQuery]
    public string ReturnUrl { get; set; } = "/";

    [SupplyParameterFromForm]
    protected Logins loginModel { get; set; } = new();

    public string errorMessage { get; set; } = string.Empty;
    public string passwordType => showPassword ? "text" : "password";
    private bool showPassword = false;

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }
    private string authMessage = "The user is NOT authenticated.";

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                authMessage = $"{user.Identity.Name} is authenticated.";
            }
        }
    }

    public async Task HandleLogin()
    {
        try
        {
            var currentUser = Context.users.FirstOrDefault(x => x.Email == loginModel.Email);
            if (currentUser is null)
            {
                errorMessage = "Invalid email or password.";
                return;
            }

            bool isPasswordValid = BCrypt.Net.BCrypt.Verify(loginModel.Password, currentUser.PasswordHash);
            if (!isPasswordValid)
            {
                errorMessage = "Invalid email or password.";
                return;
            }

            var roleName = currentUser.RoleId == 1 ? "Simple" : "SuperUser";

            await localStorage.SetItemAsync("name", roleName);
            await localStorage.SetItemAsync("Id", currentUser.UserId);

            var customAuthProvider = (CustomAuthenticationStateProvider)AuthProvider;
            customAuthProvider.MarkUserAsAuthenticated(currentUser.Email, roleName);

            NavigationManager.NavigateTo("/weather");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Login] Exception: {ex.Message}");
            errorMessage = "An unexpected error occurred. Please try again.";
        }
    }
}
