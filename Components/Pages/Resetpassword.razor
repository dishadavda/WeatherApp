@page "/reset-password" 
@attribute [Authorize]
@layout LoginLayout
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using Weartherapp.Components.Layout
@using Weartherapp.Data
@inject NavigationManager Nav
@inject ApplicationDbContext Context

<EditForm Model="model" OnValidSubmit="HandleResetPassword">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="max-w-md mx-auto bg-white bg-opacity-90 backdrop-blur-md p-8 shadow-2xl rounded-xl mt-12">
        <h2 class="text-3xl font-bold mb-6 text-center text-green-800">Reset Password</h2>

        <!-- New Password -->
        <div class="mb-4">
            <label class="block text-gray-700 mb-1 font-medium">New Password</label>
            <InputText type="password"
                       @bind-Value="model.NewPassword"
                       class="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-green-400" />
            <ValidationMessage For="@(() => model.NewPassword)" />
        </div>

        <!-- Confirm Password -->
        <div class="mb-6">
            <label class="block text-gray-700 mb-1 font-medium">Confirm Password</label>
            <InputText type="password"
                       @bind-Value="model.ConfirmPassword"
                       class="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-green-400" />
            <ValidationMessage For="@(() => model.ConfirmPassword)" />
        </div>

        <button type="submit"
                class="w-full bg-green-600 text-white py-2 rounded hover:bg-green-700 transition duration-200">
            Reset Password
        </button>

        @if (!string.IsNullOrEmpty(message))
        {
            <div class="text-blue-600 text-center mt-4 font-medium">@message</div>
        }
    </div>
</EditForm>

@code {
    [Parameter] public string? Token { get; set; }

    private ResetModel model = new();
    private string message = "";

    protected override void OnInitialized()
    {
        Token = Nav.ToAbsoluteUri(Nav.Uri).Query.Contains("token=")
            ? System.Web.HttpUtility.ParseQueryString(Nav.ToAbsoluteUri(Nav.Uri).Query).Get("token")
            : null;
    }

    public class ResetModel
    {
        [Required(ErrorMessage = "New password is required")]
        [MinLength(6, ErrorMessage = "Minimum 6 characters required")]
        public string NewPassword { get; set; } = string.Empty;

        [Compare(nameof(NewPassword), ErrorMessage = "Passwords must match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    private async Task HandleResetPassword()
    {
        if (string.IsNullOrEmpty(Token))
        {
            message = "Invalid or missing token.";
            return;
        }

        try
        {
            // ✅ Async query to the database
            var resetToken = await Context.PasswordResetTokens
                         .FirstOrDefaultAsync(t => t.Token == Token && t.ExpiryDate > DateTime.UtcNow);

            if (resetToken == null)
            {
                message = "Invalid or expired token.";
                return;
            }

            // ✅ Securely hash the new password
            // 2. Get the corresponding user from Users table
            var user = await Context.users.FirstOrDefaultAsync(u => u.UserId == resetToken.UserId);
            if (user == null)
            {
                message = "User not found.";
                return;
            }

            // 3. Update the user's password
            user.PasswordHash = BCrypt.Net.BCrypt.HashPassword(model.NewPassword);

            // 4. Remove the used token
            Context.PasswordResetTokens.Remove(resetToken);

            await Context.SaveChangesAsync();

            message = "Password reset successful. Redirecting to login...";
            await Task.Delay(3000);
            Nav.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex); // for debugging
            message = "An error occurred while resetting your password.";
        }
    }
}
