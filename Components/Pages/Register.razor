@page "/authentication/register"
@layout LoginLayout
@using System.ComponentModel.DataAnnotations
@using Weartherapp.Components.Layout
@using Weartherapp.Data
@using WeatherApp.Data.Entities
@using WeatherApp.Data.Models
@inject NavigationManager Navigation
@inject ApplicationDbContext Context;



<EditForm Model="registerModel" OnValidSubmit="HandleRegister" FormName="RegisterForm">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-red-500 mb-4" />

    <div class="max-w-md mx-auto bg-white bg-opacity-90 backdrop-blur-md p-8 shadow-2xl rounded-xl mt-12">
        <h2 class="text-3xl font-bold mb-6 text-center text-blue-800">Create an Account</h2>

        <!-- First Name -->
        <div class="mb-4">
            <label class="block text-gray-700 mb-1 font-medium">First Name</label>
            <InputText @bind-Value="registerModel.FirstName" class="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-400" />
            <ValidationMessage For="@(() => registerModel.FirstName)" class="text-sm text-red-500" />
        </div>

        <!-- Last Name -->
        <div class="mb-4">
            <label class="block text-gray-700 mb-1 font-medium">Last Name</label>
            <InputText @bind-Value="registerModel.LastName" class="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-400" />
            <ValidationMessage For="@(() => registerModel.LastName)" class="text-sm text-red-500" />
        </div>

        <!-- Email -->
        <div class="mb-4">
            <label class="block text-gray-700 mb-1 font-medium">Email</label>
            <InputText @bind-Value="registerModel.Email" type="email" class="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-400" />
            <ValidationMessage For="@(() => registerModel.Email)" class="text-sm text-red-500" />
        </div>

        <!-- Password -->
        <div class="mb-4">
            <label class="block text-gray-700 mb-1 font-medium">Password</label>
            <div class="relative">
                <InputText @bind-Value="registerModel.Password"
                           type="@passwordInputType"
                           class="w-full p-2 pr-12 border border-gray-300 rounded focus:ring-2 focus:ring-blue-400" />
                <button type="button"
                        @onclick="TogglePasswordVisibility"
                        class="absolute inset-y-0 right-3 flex items-center text-gray-500 hover:text-gray-800 focus:outline-none">
                    @if (showPassword)
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M13.875 18.825A10.05 10.05 0 0112 19c-5.523 0-10-5.373-10-7s4.477-7 10-7c1.19 0 2.332.209 3.375.6M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                            <path stroke-linecap="round" stroke-linejoin="round" d="M3 3l18 18" />
                        </svg>
                    }
                    else
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                            <path stroke-linecap="round" stroke-linejoin="round" d="M2.458 12C3.732 7.943 7.523 5 12 5s8.268 2.943 9.542 7c-1.274 4.057-5.065 7-9.542 7S3.732 16.057 2.458 12z" />
                        </svg>
                    }
                </button>
            </div>
            <ValidationMessage For="@(() => registerModel.Password)" class="text-sm text-red-500" />
        </div>

        <!-- Confirm Password -->
        <div class="mb-4">
            <label class="block text-gray-700 mb-1 font-medium">Confirm Password</label>
            <InputText @bind-Value="registerModel.ConfirmPassword" type="password" class="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-400" />
            <ValidationMessage For="@(() => registerModel.ConfirmPassword)" class="text-sm text-red-500" />
        </div>

        <!-- Gender -->
        <div class="mb-6">
            <label class="block text-gray-700 mb-1 font-medium">Gender</label>
            <InputSelect @bind-Value="registerModel.Gender" class="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-400">
                <option value="">Select Gender</option>
                <option>Male</option>
                <option>Female</option>
                <option>Other</option>
            </InputSelect>
            <ValidationMessage For="@(() => registerModel.Gender)" class="text-sm text-red-500" />
        </div>

        <!-- Submit Button -->
        <button type="submit"
                class="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700 transition duration-200">
            Register
        </button>

        <!-- Error Message -->
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="text-red-600 text-center mt-4 font-medium">@errorMessage</div>
        }

        <!-- Login Redirect -->
        <p class="mt-6 text-center text-sm text-gray-700">
            Already have an account?
            <a href="/login" class="text-blue-600 hover:underline">Login here</a>
        </p>
    </div>
</EditForm>

@code {

    [SupplyParameterFromForm(FormName = "RegisterForm")]
    private RegisterViewModel registerModel { get; set; } = new();
    private string? errorMessage;
    private bool showPassword = false;
    private string passwordInputType => showPassword ? "text" : "password";
    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }
    private async Task HandleRegister()
    {
        try
        {
            if (registerModel.Password != registerModel.ConfirmPassword)
            {
                errorMessage = "Passwords do not match.";
                return;
            }

            var existingUser =  Context.users.FirstOrDefault(u => u.Email == registerModel.Email);
            if (existingUser != null)
            {
                errorMessage = "An account with this email already exists.";
                return;
            }

            // Proceed to create new user
            var newUser = new User
            {
                FirstName = registerModel.FirstName,
                LastName = registerModel.LastName,
                Email = registerModel.Email,
                Username = registerModel.FirstName + registerModel.LastName,
                PasswordHash = BCrypt.Net.BCrypt.HashPassword(registerModel.Password),
                RoleId = 1, // Change as needed
                Gender = registerModel.Gender
            };

            Context.users.Add(newUser);
            await Context.SaveChangesAsync();

            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error while registering user: {ex.Message}");
            errorMessage = "Error registering user.";
        }
    }

    
}
