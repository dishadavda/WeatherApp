@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthProvider

<div class="relative min-h-screen bg-cover bg-center" style="background-image: url('/images/weather-bg.jpg');">
    <!-- Optional overlay -->
    <div class="absolute inset-0 bg-black bg-opacity-10"></div>

    <!-- Top navigation/auth bar -->
    <div class="absolute top-0 left-0 right-0 z-20 px-6 py-4 flex justify-between items-center text-white bg-black bg-opacity-40">
        <div class="flex-1 flex justify-center">
            <h1 class="text-2xl font-bold">Weather App</h1>
        </div>

        <AuthorizeView>
            <Authorized>
                <div class="absolute right-6 top-4 flex items-center gap-4">
                    <span class="font-semibold">Welcome @context.User.Identity?.Name!</span>
                    <button @onclick="Logout"
                            class="bg-red-500 hover:bg-red-600 px-3 py-1 rounded shadow">
                        Logout
                    </button>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="absolute right-6 top-4">
                    <a href="/login" class="hover:underline text-white">Login</a>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </div>

    <!-- Main content -->
    <div class="relative z-10 flex justify-center items-center min-h-screen px-4 pt-16">
        <div class="w-full max-w-4xl mx-auto">
            @Body
        </div>
    </div>
</div>

@code {
    private async Task Logout()
    {
        await JS.InvokeVoidAsync("localStorage.removeItem", "email");
        await JS.InvokeVoidAsync("localStorage.removeItem", "name");
        await JS.InvokeVoidAsync("localStorage.removeItem", "Id");
        await JS.InvokeVoidAsync("localStorage.removeItem", "role");

        if (AuthProvider is CustomAuthenticationStateProvider customAuth)
        {
            customAuth.MarkUserAsLoggedOut();
        }


        Nav.NavigateTo("/login", true);
    }
}
